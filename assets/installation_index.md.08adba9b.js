import{_ as s,c as a,o as n,b as e}from"./app.b7e23f82.js";const l="/assets/dns.482270cd.png",C=JSON.parse('{"title":"Installation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Yarn Repo","slug":"yarn-repo","link":"#yarn-repo","children":[{"level":3,"title":"Ubuntu Server 20.04 LTS","slug":"ubuntu-server-20-04-lts","link":"#ubuntu-server-20-04-lts","children":[]},{"level":3,"title":"Fedora Server 33","slug":"fedora-server-33","link":"#fedora-server-33","children":[]}]},{"level":2,"title":"Install dependencies","slug":"install-dependencies","link":"#install-dependencies","children":[{"level":3,"title":"Ubuntu Server 20.04 LTS","slug":"ubuntu-server-20-04-lts-1","link":"#ubuntu-server-20-04-lts-1","children":[]},{"level":3,"title":"Fedora Server 33","slug":"fedora-server-33-1","link":"#fedora-server-33-1","children":[]}]},{"level":2,"title":"Firewall rules","slug":"firewall-rules","link":"#firewall-rules","children":[]},{"level":2,"title":"Info","slug":"info","link":"#info","children":[]},{"level":2,"title":"Create Discord Application","slug":"create-discord-application","link":"#create-discord-application","children":[]},{"level":2,"title":"Clone repositories","slug":"clone-repositories","link":"#clone-repositories","children":[]},{"level":2,"title":"Setup API","slug":"setup-api","link":"#setup-api","children":[]},{"level":2,"title":"Setup Web","slug":"setup-web","link":"#setup-web","children":[]},{"level":2,"title":"Create Docker network","slug":"create-docker-network","link":"#create-docker-network","children":[]},{"level":2,"title":"Setup Portals","slug":"setup-portals","link":"#setup-portals","children":[]},{"level":2,"title":"Setup Janus","slug":"setup-janus","link":"#setup-janus","children":[]},{"level":2,"title":"Setup Portal","slug":"setup-portal","link":"#setup-portal","children":[]},{"level":2,"title":"Start everything","slug":"start-everything","link":"#start-everything","children":[{"level":3,"title":"Start API","slug":"start-api","link":"#start-api","children":[]},{"level":3,"title":"Start Web","slug":"start-web","link":"#start-web","children":[]},{"level":3,"title":"Start Portals","slug":"start-portals","link":"#start-portals","children":[]},{"level":3,"title":"Start Janus","slug":"start-janus","link":"#start-janus","children":[]},{"level":3,"title":"Start a portal manually","slug":"start-a-portal-manually","link":"#start-a-portal-manually","children":[]}]},{"level":2,"title":"Setup reverse proxy","slug":"setup-reverse-proxy","link":"#setup-reverse-proxy","children":[{"level":3,"title":"DNS","slug":"dns","link":"#dns","children":[]},{"level":3,"title":"Install stuff","slug":"install-stuff","link":"#install-stuff","children":[]},{"level":3,"title":"Run certbot","slug":"run-certbot","link":"#run-certbot","children":[]},{"level":3,"title":"Edit nginx config","slug":"edit-nginx-config","link":"#edit-nginx-config","children":[]}]}],"relativePath":"installation/index.md","lastUpdated":1664196584000}'),p={name:"installation/index.md"},o=e(`<h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h1><p>Cryb requires a Redis and a MongoDB server, NodeJS, Yarn and Docker.</p><h2 id="yarn-repo" tabindex="-1">Yarn Repo <a class="header-anchor" href="#yarn-repo" aria-hidden="true">#</a></h2><p>First we add the Yarn repo</p><h3 id="ubuntu-server-20-04-lts" tabindex="-1">Ubuntu Server 20.04 LTS <a class="header-anchor" href="#ubuntu-server-20-04-lts" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo apt-key add -</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">deb https://dl.yarnpkg.com/debian/ stable main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo tee /etc/apt/sources.list.d/yarn.list</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt update</span></span>
<span class="line"></span></code></pre></div><h3 id="fedora-server-33" tabindex="-1">Fedora Server 33 <a class="header-anchor" href="#fedora-server-33" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo tee /etc/yum.repos.d/yarn.repo</span></span>
<span class="line"></span></code></pre></div><h2 id="install-dependencies" tabindex="-1">Install dependencies <a class="header-anchor" href="#install-dependencies" aria-hidden="true">#</a></h2><h3 id="ubuntu-server-20-04-lts-1" tabindex="-1">Ubuntu Server 20.04 LTS <a class="header-anchor" href="#ubuntu-server-20-04-lts-1" aria-hidden="true">#</a></h3><p>Then we install the dependencies. We also install <code>screen</code> to run it in the background later on.</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt remove cmdtest</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt install mongodb redis-server docker.io yarn git screen</span></span>
<span class="line"></span></code></pre></div><h3 id="fedora-server-33-1" tabindex="-1">Fedora Server 33 <a class="header-anchor" href="#fedora-server-33-1" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ cat </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#89DDFF;">EOF</span><span style="color:#C3E88D;"> | sudo tee /etc/yum.repos.d/mongodb.repo</span></span>
<span class="line"><span style="color:#C3E88D;">[mongodb-4.2]</span></span>
<span class="line"><span style="color:#C3E88D;">name=MongoDB Repository</span></span>
<span class="line"><span style="color:#C3E88D;">baseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.2/x86_64/</span></span>
<span class="line"><span style="color:#C3E88D;">gpgcheck=1</span></span>
<span class="line"><span style="color:#C3E88D;">enabled=1</span></span>
<span class="line"><span style="color:#C3E88D;">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span></span>
<span class="line"><span style="color:#89DDFF;">EOF</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo dnf -y install dnf-plugins-core</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo dnf install mongodb-org redis docker-ce docker-ce-cli containerd.io yarn git screen</span></span>
<span class="line"></span></code></pre></div><h2 id="firewall-rules" tabindex="-1">Firewall rules <a class="header-anchor" href="#firewall-rules" aria-hidden="true">#</a></h2><p>If you&#39;re using firewalld, you must add these rules</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --change-interface=br0</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --add-port=5353/udp</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --add-port=45917/udp</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --add-port=8888/udp</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --add-port=51515/udp</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo firewall-cmd --permanent --zone=docker --add-port=42311/udp</span></span>
<span class="line"></span></code></pre></div><h2 id="info" tabindex="-1">Info <a class="header-anchor" href="#info" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In the following replace <code>YOURDOMAIN</code>. You may want to use a subdomain like <code>cryb.example.org</code> or your main domain <code>example.org</code></p></div><h2 id="create-discord-application" tabindex="-1">Create Discord Application <a class="header-anchor" href="#create-discord-application" aria-hidden="true">#</a></h2><p>Since login works via Discord you need you create a Discord application.<br> Visit the <a href="https://discord.com/developers/applications" target="_blank" rel="noreferrer">Discord Developer Portal</a> to do so.</p><ul><li>Click on <code>New application</code> and give it a name.</li><li>Then copy and save the <code>Client ID</code> and <code>Client Secret</code> (You will need them later)</li><li>Now go to <code>OAuth2</code> and a <code>Redirect</code><ul><li>If you plan on using a <a href="./#setup-reverse-proxy">reverse proxy</a> just add <code>https://YOURDOMAIN/auth/discord</code></li><li>Otherwise, add <code>http://YOURDOMAIN:3000/auth/discord</code></li></ul></li></ul><h2 id="clone-repositories" tabindex="-1">Clone repositories <a class="header-anchor" href="#clone-repositories" aria-hidden="true">#</a></h2><p>Create a directory and clone all required repositories</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">mkdir cryb</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/crybapp/api.git</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/crybapp/web.git</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/crybapp/portals.git</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/crybapp/portal.git</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/crybapp/janus-docker.git</span></span>
<span class="line"></span></code></pre></div><h2 id="setup-api" tabindex="-1">Setup API <a class="header-anchor" href="#setup-api" aria-hidden="true">#</a></h2><p>Move into the <code>api</code> directory</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> api</span></span>
<span class="line"></span></code></pre></div><p>Install dependencies</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn</span></span>
<span class="line"></span></code></pre></div><p>Rename environment file and edit</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">mv .env.example .env</span></span>
<span class="line"><span style="color:#A6ACCD;">nano .env</span></span>
<span class="line"></span></code></pre></div><p>Set</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#F07178;">NODE_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">production</span></span>
<span class="line"><span style="color:#F07178;">JWT_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">bigcrybfan</span></span>
<span class="line"><span style="color:#F07178;">MONGO_URI</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">mongodb://localhost:27017/cryb</span></span>
<span class="line"><span style="color:#F07178;">PORTALS_API_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">thinkingwithportals</span></span>
<span class="line"><span style="color:#F07178;">REDIS_URI</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">redis://localhost:6379</span></span>
<span class="line"></span></code></pre></div><p>For Discord, we set</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#F07178;">DISCORD_CLIENT_ID</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">&lt;Your client ID here&gt;</span></span>
<span class="line"><span style="color:#F07178;">DISCORD_CLIENT_SECRET</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">&lt;Your client secret here&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>If you plan on using a <a href="./#setup-reverse-proxy">reverse proxy</a> set <ul><li><code>DISCORD_OAUTH_ORIGINS=https://YOURDOMAIN</code></li><li><code>DISCORD_CALLBACK_URL=https://YOURDOMAIN/auth/discord</code></li></ul></li><li>Otherwise, set <ul><li><code>DISCORD_OAUTH_ORIGINS=http://YOURDOMAIN:3000</code></li><li><code>DISCORD_CALLBACK_URL=http://YOURDOMAIN:3000/auth/discord</code></li></ul></li></ul><h2 id="setup-web" tabindex="-1">Setup Web <a class="header-anchor" href="#setup-web" aria-hidden="true">#</a></h2><p>Move into the <code>web</code> directory</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> web</span></span>
<span class="line"></span></code></pre></div><p>Install dependencies</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn</span></span>
<span class="line"></span></code></pre></div><p>Rename environment file and edit</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">mv .env.example .env</span></span>
<span class="line"><span style="color:#A6ACCD;">nano .env</span></span>
<span class="line"></span></code></pre></div><p>Set</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#F07178;">NODE_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">production</span></span>
<span class="line"><span style="color:#F07178;">COOKIE_DOMAIN</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">.YOURDOMAIN</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Important: you need that <code>.</code> in front of <code>YOURDOMAIN</code></p></div><ul><li>If you plan on using a <a href="./#setup-reverse-proxy">reverse proxy</a> set <ul><li><code>API_WS_URL=wss://YOURDOMAIN/apiws</code></li><li><code>API_BASE_URL=https://YOURDOMAIN/api</code></li><li><code>WEB_BASE_URL=https://YOURDOMAIN</code></li><li><code>JANUS_URL=https://YOURDOMAIN/janus</code></li></ul></li><li>Otherwise, set <ul><li><code>API_WS_URL=ws://YOURDOMAIN:4000</code></li><li><code>API_BASE_URL=http://YOURDOMAIN:4000</code></li><li><code>WEB_BASE_URL=http://YOURDOMAIN:3000</code></li><li><code>JANUS_URL=http://YOURDOMAIN:8088</code></li></ul></li></ul><h2 id="create-docker-network" tabindex="-1">Create Docker network <a class="header-anchor" href="#create-docker-network" aria-hidden="true">#</a></h2><p>We will create a docker network for the portals communication</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">docker network create -d bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 portalnet</span></span>
<span class="line"></span></code></pre></div><h2 id="setup-portals" tabindex="-1">Setup Portals <a class="header-anchor" href="#setup-portals" aria-hidden="true">#</a></h2><p>Move into the <code>portals</code> directory</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> portals</span></span>
<span class="line"></span></code></pre></div><p>Install dependencies</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn</span></span>
<span class="line"></span></code></pre></div><p>Rename environment file and edit</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">mv .env.example .env</span></span>
<span class="line"><span style="color:#A6ACCD;">nano .env</span></span>
<span class="line"></span></code></pre></div><p>Set</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#F07178;">NODE_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">production</span></span>
<span class="line"><span style="color:#F07178;">MONGODB_URI</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">mongodb://localhost:27017/cryb</span></span>
<span class="line"><span style="color:#F07178;">REDIS_URI</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">redis://localhost:6379</span></span>
<span class="line"><span style="color:#F07178;">API_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">thinkingwithportals</span></span>
<span class="line"><span style="color:#F07178;">PORTAL_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ilikeportals</span></span>
<span class="line"><span style="color:#F07178;">DRIVER</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">docker</span></span>
<span class="line"><span style="color:#F07178;">DOCKER_SOCK</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">/var/run/docker.sock</span></span>
<span class="line"><span style="color:#F07178;">DOCKER_IMAGE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">cryb/portal</span></span>
<span class="line"><span style="color:#F07178;">DOCKER_SHM_SIZE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">1024</span></span>
<span class="line"><span style="color:#F07178;">DOCKER_NETWORK</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">portalnet</span></span>
<span class="line"><span style="color:#F07178;">ENABLE_JANUS</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">true</span></span>
<span class="line"><span style="color:#F07178;">JANUS_HOSTNAME</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">localhost</span></span>
<span class="line"><span style="color:#F07178;">JANUS_STREAMING_ADMIN_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">supersecret</span></span>
<span class="line"><span style="color:#F07178;">JANUS_PORT</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">8088</span></span>
<span class="line"></span></code></pre></div><h2 id="setup-janus" tabindex="-1">Setup Janus <a class="header-anchor" href="#setup-janus" aria-hidden="true">#</a></h2><p>Move into the <code>janus-docker</code> directory</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> janus-docker</span></span>
<span class="line"></span></code></pre></div><p>Rename config files</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> configs</span></span>
<span class="line"><span style="color:#A6ACCD;">mv janus.jcfg.example janus.jcfg</span></span>
<span class="line"><span style="color:#A6ACCD;">mv janus.plugin.streaming.jcfg.example janus.plugin.streaming.jcfg</span></span>
<span class="line"><span style="color:#A6ACCD;">mv janus.transport.http.jcfg.example janus.transport.http.jcfg</span></span>
<span class="line"></span></code></pre></div><p>Edit streaming config</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">nano janus.plugin.streaming.jcfg</span></span>
<span class="line"></span></code></pre></div><p>Uncomment <code>#admin_key = &quot;supersecret&quot;</code> under <code>general</code></p><p>Go back and build docker image</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> ..</span></span>
<span class="line"><span style="color:#A6ACCD;">docker build </span><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> -t cryb/janus</span></span>
<span class="line"></span></code></pre></div><h2 id="setup-portal" tabindex="-1">Setup Portal <a class="header-anchor" href="#setup-portal" aria-hidden="true">#</a></h2><p>Move into the <code>portal</code> directory</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> portal</span></span>
<span class="line"></span></code></pre></div><p>Install dependencies</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn</span></span>
<span class="line"></span></code></pre></div><p>Rename environment file and edit</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">mv .env.example .env</span></span>
<span class="line"><span style="color:#A6ACCD;">nano .env</span></span>
<span class="line"></span></code></pre></div><p>Set</p><div class="language-ini"><button class="copy"></button><span class="lang">ini</span><pre><code><span class="line"><span style="color:#F07178;">NODE_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">production</span></span>
<span class="line"><span style="color:#F07178;">PORTALS_WS_URL</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ws://192.168.0.1:5000</span></span>
<span class="line"><span style="color:#F07178;">STREAMING_URL</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">192.168.0.1</span></span>
<span class="line"><span style="color:#F07178;">PORTALS_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">ilikeportals</span></span>
<span class="line"></span></code></pre></div><p>Build docker image</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">yarn docker:build</span></span>
<span class="line"></span></code></pre></div><h2 id="start-everything" tabindex="-1">Start everything <a class="header-anchor" href="#start-everything" aria-hidden="true">#</a></h2><h3 id="start-api" tabindex="-1">Start API <a class="header-anchor" href="#start-api" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb/api</span></span>
<span class="line"><span style="color:#A6ACCD;">screen -S cryb-api</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn build </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> yarn start</span></span>
<span class="line"></span></code></pre></div><h3 id="start-web" tabindex="-1">Start Web <a class="header-anchor" href="#start-web" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb/web</span></span>
<span class="line"><span style="color:#A6ACCD;">screen -S cryb-web</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn build </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> yarn start</span></span>
<span class="line"></span></code></pre></div><h3 id="start-portals" tabindex="-1">Start Portals <a class="header-anchor" href="#start-portals" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb/portals</span></span>
<span class="line"><span style="color:#A6ACCD;">screen -S cryb-portals</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn build </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> yarn start</span></span>
<span class="line"></span></code></pre></div><h3 id="start-janus" tabindex="-1">Start Janus <a class="header-anchor" href="#start-janus" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb/janus-docker</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --rm --name cryb-janus -it --net=host -d cryb/janus</span></span>
<span class="line"></span></code></pre></div><h3 id="start-a-portal-manually" tabindex="-1">Start a portal manually <a class="header-anchor" href="#start-a-portal-manually" aria-hidden="true">#</a></h3><p>If you&#39;ve set <code>DRIVER=docker</code> in the <code>portals/.env</code> portals should automatically start. If you want you can set it to <code>manual</code> and start them manually. Look into the <code>cryb-portals</code> output for the ID (just the numbers) and start a portal:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> cryb/portal</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn docker:dev --portalId </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Portal-ID</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="setup-reverse-proxy" tabindex="-1">Setup reverse proxy <a class="header-anchor" href="#setup-reverse-proxy" aria-hidden="true">#</a></h2><p>Now we&#39;ll setup a reverse proxy which enables everything to run with SSL and on the root of your domain.</p><h3 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-hidden="true">#</a></h3><p>Add an <code>A</code> entry with the IP of your VPS, and a (sub)domain which you chose earlier. <img src="`+l+`" alt="DNS Setup"></p><h3 id="install-stuff" tabindex="-1">Install stuff <a class="header-anchor" href="#install-stuff" aria-hidden="true">#</a></h3><p>For this we will install nginx and certbot</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo apt install nginx certbot python3-certbot-nginx</span></span>
<span class="line"></span></code></pre></div><h3 id="run-certbot" tabindex="-1">Run certbot <a class="header-anchor" href="#run-certbot" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo certbot --nginx -d YOURDOMAIN</span></span>
<span class="line"></span></code></pre></div><h3 id="edit-nginx-config" tabindex="-1">Edit nginx config <a class="header-anchor" href="#edit-nginx-config" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo nano /etc/nginx/sites-available/default</span></span>
<span class="line"></span></code></pre></div><p>Replace the <code>location /</code> section with</p><div class="language-nginx"><button class="copy"></button><span class="lang">nginx</span><pre><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://127.0.0.1:3000/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-Proto </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> client_max_body_size </span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/api </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://127.0.0.1:4000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">rewrite</span><span style="color:#A6ACCD;">    /api/(.*) /</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1 </span><span style="color:#F78C6C;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-Proto </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> client_max_body_size </span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/apiws </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://127.0.0.1:4000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_http_version </span><span style="color:#A6ACCD;">1.1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Upgrade </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_upgrade</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Connection </span><span style="color:#C3E88D;">&quot;Upgrade&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/janus </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://127.0.0.1:8088</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">rewrite</span><span style="color:#A6ACCD;">    /janus/(.*) /</span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">1 </span><span style="color:#F78C6C;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">http_host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_set_header </span><span style="color:#A6ACCD;">X-Forwarded-Proto </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> client_max_body_size </span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>Restart nginx</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo service nginx restart</span></span>
<span class="line"></span></code></pre></div>`,108),t=[o];function r(c,i,d,y,D,A){return n(),a("div",null,t)}const h=s(p,[["render",r]]);export{C as __pageData,h as default};
